#!/bin/bash
#How to install Helm
#The installation of Helm is actually quite simple. Log in to your Kubernetes master and download the necessary .tar file with the command:

#wget https://get.helm.sh/helm-v3.0.2-linux-amd64.tar.gz
#If your architecture is not amd64, download the correct version from the Helm release page.

#Once the file is downloaded, unpack it with the command:

#tar xvf helm-v3.0.2-linux-amd64.tar.gz
#Finally move the executable to the proper location with the command:

#sudo mv linux-amd64/helm /usr/local/bin/
#To verify the install worked, issue the command:

#helm version


set -eou pipefail

#set helm version
helmVersion=helm-v3.0.2-linux-amd64.tar.gz

#download helm version
wget https://get.helm.sh/$helmVersion
tar xvzf $helmVersion

#mv helm3 binary to local tmp folder
if [[ -e /usr/local/bin/tmp ]] ; then echo "tmp folder already exists" ; else sudo mkdir /usr/local/bin/tmp ; fi
sudo mv linux-amd64/helm /usr/local/bin/tmp/helm

#TEMPORARY export $HELM_HOME so you don't overwrite Helm2 ~/.helm/
export HELM_HOME=/usr/local/bin/tmp/helm3

#set temp alias
helm3=/usr/local/bin/tmp/helm

#add alias to .bashrc
echo "alias helm3=/usr/local/bin/tmp/helm" >> ~/.bashrc

# cleanup
rm -rf $helmVersion
rm -rf linux-amd64


# verify
[cstark@cstark ~]$ helm3 version
version.BuildInfo{Version:"v3.0.2", GitCommit:"19e47ee3283ae98139d98460de796c1be1e3975f", GitTreeState:"clean", GoVersion:"go1.13.5"}
[cstark@cstark ~]$ 


# add helm3 repo
helm3 repo add stable https://kubernetes-charts.storage.googleapis.com/

# update helm3 repo
[cstark@cstark ~]$ helm3 repo update
Hang tight while we grab the latest from your chart repositories...
...Successfully got an update from the "stable" chart repository
Update Complete. ⎈ Happy Helming!⎈ 


# install application
cstark@cstark ~]$ helm3 install stable/prometheus --generate-name
Error: Kubernetes cluster unreachable

# create local chart 
helm3 create hello-helm3
# Take a close look at the generated Chart.yaml it explicitly specifies the type as Application. If you want to create a reusable Library Chart, you have to change the type setting to library and remove the templates.

# create two sample namespace
kubectl create namspace helm3-ns1
kubectl create namespace helm3-ns2


helm repo add starkiinformatik https://ch-stark.github.io/helm-charts/


kubectl get ns | grep helm3


# Having the namspaces in place, use helm3 install to install the previously created Chart to both namespaces.
# https://thorsten-hans.com/the-state-of-helm3-hands-on
cd ~/dev

helm3 install sample-deployment hello-helm3 -n helm3-ns1
helm3 install sample-deployment hello-helm3 -n helm3-ns2

Bash


By default helm creates an nginx deployment. Let’s customize it a bit. Add new ConfigMap to the templates directory:
$ cat << HELM > hello-helm3/templates/cm.yaml
apiVersion: v1
data:
  nginx.conf: |
    events {
      worker_connections  1024;
    }
    http {
      server {
        listen 80;
        location / {
          return 200 "===============================\n\n   This is your helm deploy!   \n\n===============================\n";
        }
      }
    }
kind: ConfigMap
metadata:
  name: nginx-config
HELM


https://github.com/ch-stark/helm/tree/master/cmd/helm/testdata/testcharts/alpine



[cstark@cstark helm3test]$ oc login https://api.myocp.sandbox1202.opentlc.com:6443
The server uses a certificate signed by an unknown authority.
You can bypass the certificate check, but any data you send to the server could be intercepted by others.
Use insecure connections? (y/n): y

Authentication required for https://api.myocp.sandbox1202.opentlc.com:6443 (openshift)
Username: kubeadmin
Password: 
Login successful.

You have access to 51 projects, the list has been suppressed. You can list all projects with 'oc projects'

Using project "default".
[cstark@cstark helm3test]$ helm3 install alpinetest/ --generate-name
NAME: alpinetest-1578063048
LAST DEPLOYED: Fri Jan  3 15:50:48 2020
NAMESPACE: default
STATUS: deployed
REVISION: 1
NOTES:
1. Get the application URL by running these commands:
  export POD_NAME=$(kubectl get pods --namespace default -l "app.kubernetes.io/name=alpinetest,app.kubernetes.io/instance=alpinetest-1578063048" -o jsonpath="{.items[0].metadata.name}")
  echo "Visit http://127.0.0.1:8080 to use your application"
  kubectl --namespace default port-forward $POD_NAME 8080:80
[cstark@cstark helm3test]$


#good to know
https://github.com/fluxcd/helm-operator/blob/master/docs/references/helmrelease-custom-resource.md#using-a-chart-from-a-git-repo-instead-of-a-helm-repo

